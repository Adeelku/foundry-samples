# ---------------------------------------------------------------
# .github/workflows/project-e2e-tests.yml
#
# PURPOSE
# ▸ Run the same end-to-end test-suite against **many already-
#   provisioned projects**.  Each project has its own value for
#   PROJECT_CLIENT, while MODEL_DEPLOYMENT_NAME is global.
#
# HOW TO USE
# 1.  Under **Settings ▸ Environments** create one environment
#     per project (project-alpha, project-beta, …).
# 2.  In every environment add the secret  PROJECT_CLIENT
#     with that project’s value.
# 3.  In **Settings ▸ Secrets → Actions** (repo-level) add a
#     secret called  MODEL_DEPLOYMENT_NAME  that is identical
#     for all projects.
# 4.  List your projects in the matrix below.
# 5.  Push a PR that touches tests/  →  this workflow fans out
#     and runs once per project, each run getting the correct
#     secrets automatically.
# ---------------------------------------------------------------

name: Project E2E Tests

# ── 1️⃣  WHEN TO RUN ─────────────────────────────────────────────
on:
  pull_request_target:                # Use target so the workflow
                                      # file comes from the protected
    branches: [ main ]                # main branch (safer than PR),
    paths:                            # and we still have access to
      - "tests/**"                    # secrets for cloud creds.

# ── 2️⃣  JOB DEFINITION (matrix fan-out) ─────────────────────────
jobs:
  e2e:
    name: "E2E – ${{ matrix.project }}"   # Shows up as “E2E – alpha”
    runs-on: ubuntu-latest
    permissions:
      contents: read                      # read the repo
      id-token: write                     # (only if you OIDC into Azure, AWS, …)

    # Matrix drives one job per project.
    strategy:
      fail-fast: false                    # Don’t cancel others if one fails
      matrix:
        project: [ SAI_UAI, UAI]   # <── ADD / REMOVE PROJECT_CLIENTS here

    # Map the matrix entry → matching Environment
    # e.g. alpha   → project-alpha
    environment: project-${{ matrix.project }}

    # ── 3️⃣  STEPS ───────────────────────────────────────────────
    steps:

    # -- 3.1  Check out PR code ----------------------------------
    - name: Checkout code
      uses: actions/checkout@v4

    # -- 3.2  JavaScript / TypeScript (Vitest) -------------------
    - name: Set up Node.js (for Vitest)
      uses: actions/setup-node@v4
      with:
        node-version: "20"               # use LTS; bump as needed
        cache: npm                       # built-in cache keyed by package-lock.json

    - name: Install JS dependencies
      run: npm ci

    - name: Run Vitest integration suite
      # Inject the secrets as environment variables that your app/tests read.
      env:
        PROJECT_CLIENT:        ${{ secrets.PROJECT_CLIENT }}
        MODEL_DEPLOYMENT_NAME: ${{ secrets.MODEL_DEPLOYMENT_NAME }}
      run: |
        # Add any flags you like: coverage, reporters, etc.
        npx vitest run

    # -- 3.3  .NET (dotnet test) ---------------------------------
    - name: Set up .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: "8.0.x"          # or 6.x / 7.x

    - name: Restore & build .NET projects
      run: dotnet restore

    - name: Run .NET tests
      env:
        PROJECT_CLIENT:        ${{ secrets.PROJECT_CLIENT }}
        MODEL_DEPLOYMENT_NAME: ${{ secrets.MODEL_DEPLOYMENT_NAME }}
      run: |
        dotnet test --configuration Release --verbosity normal

    # -- 3.4  Python / Pytest -------------------------
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.9"
        cache: pip
    
    - name: Install Python deps
      run: pip install -r requirements.txt
    
    - name: Run pytest
      env:
        PROJECT_CLIENT:        ${{ secrets.PROJECT_CLIENT }}
        MODEL_DEPLOYMENT_NAME: ${{ secrets.MODEL_DEPLOYMENT_NAME }}
      run: pytest -q
